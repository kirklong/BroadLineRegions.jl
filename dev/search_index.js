var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#BLR.binModel","page":"API","title":"BLR.binModel","text":"bin the model into a histogram, where each bin is the integrated value of the yVariable as a function of the xVariable params:      m: model         - model object to bin     yVariable: Union{String, Symbol, Function} – if String then will be converted to symbols         - y variable to bin         - must be valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i))     bins: Union{Int, Vector{Float64}}         - number of bins or bin edges for binning         - if number of bins, then the bins will be equally spaced between the min and max of the xVariable         - if bin edges then the number of bins will be length(bins)-1             - leftmost edge is then the first bin and the rightmost edge being the last bin         - left edge of each bin is inclusive, right edge is exclusive except for the last bin which is inclusive     xVariable: Union{String, Symbol, Function}         - variable to bin over         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings     dx: each bin is an integral over the range of xVariable – if dx is provided this is used as the associated integral element, otherwise defaults to ΔA in each ring struct returns:     (binEdges, binCenters): Tuple{Vector{Float64},Vector{Float64}}         - bin edges and centers for the xVariable of the histogram      yBinned: Vector{Vector{Float64}}         - binned values of the yVariables         - length of yBinned is the same as the number of yVariables, with each element being a vector of length equal to the number of bins\n\n\n\n\n\n","category":"function"},{"location":"api/#BLR.binModel-Tuple{Vector{Float64}, Array{Float64}}","page":"API","title":"BLR.binModel","text":"bin the model into a histogram, where each bin is the integrated value of the yVariable as a function of the xVariable params:      m: model         - model object to bin     yVariable: Union{String, Symbol, Function} – if String then will be converted to symbols         - y variable to bin         - must be valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i))     bins: Union{Int, Vector{Float64}}         - number of bins or bin edges for binning         - if number of bins, then the bins will be equally spaced between the min and max of the xVariable         - if bin edges then the number of bins will be length(bins)-1             - leftmost edge is then the first bin and the rightmost edge being the last bin         - left edge of each bin is inclusive, right edge is exclusive except for the last bin which is inclusive     xVariable: Union{String, Symbol, Function}         - variable to bin over         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings     dx: each bin is an integral over the range of xVariable – if dx is provided this is used as the associated integral element, otherwise defaults to ΔA in each ring struct returns:     (binEdges, binCenters): Tuple{Vector{Float64},Vector{Float64}}         - bin edges and centers for the xVariable of the histogram      yBinned: Vector{Vector{Float64}}         - binned values of the yVariables         - length of yBinned is the same as the number of yVariables, with each element being a vector of length equal to the number of bins\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.getVariable-Tuple{BLR.model, Function}","page":"API","title":"BLR.getVariable","text":"retrieve elements from model object and stack them into matrices for easy manipulation params:     m: model         - model object to extract variables from     variable: Union{String, Symbol, Function}         - variable to extract from model (if String will be converted to Symbol)         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i)) returns:     y: Matrix{Float64}         - matrix of extracted variable from model.rings, created by stacking the output variable for each ring         - for example, if variable given is :I y will have shape (length(r), length(ϕ)) as at each r and ϕ there is a value of I\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.getVariable-Tuple{BLR.model, String}","page":"API","title":"BLR.getVariable","text":"retrieve elements from model object and stack them into matrices for easy manipulation params:     m: model         - model object to extract variables from     variable: Union{String, Symbol, Function}         - variable to extract from model (if String will be converted to Symbol)         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i)) returns:     y: Matrix{Float64}         - matrix of extracted variable from model.rings, created by stacking the output variable for each ring         - for example, if variable given is :I y will have shape (length(r), length(ϕ)) as at each r and ϕ there is a value of I\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.getVariable-Tuple{BLR.model, Symbol}","page":"API","title":"BLR.getVariable","text":"retrieve elements from model object and stack them into matrices for easy manipulation params:     m: model         - model object to extract variables from     variable: Union{String, Symbol, Function}         - variable to extract from model (if String will be converted to Symbol)         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i)) returns:     y: Matrix{Float64}         - matrix of extracted variable from model.rings, created by stacking the output variable for each ring         - for example, if variable given is :I y will have shape (length(r), length(ϕ)) as at each r and ϕ there is a value of I\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.image!-Tuple","page":"API","title":"BLR.image!","text":"BLR.image(m::model,variable::Union{String,Symbol,Function},kwargs...) Generate an image of the model where the color of each point is determined by the variable provided. params:     m: model         - model object to extract variable from     variable (optional): Union{String, Symbol, Function}         - variable to extract from model (if String will be converted to Symbol)         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i))         - if not provided, defaults to :I (intensity)     kwargs...: keyword arguments for Plots.plot returns:     p: Plots.plot\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.image!-Tuple{RecipesBase.AbstractPlot, Vararg{Any}}","page":"API","title":"BLR.image!","text":"BLR.image(m::model,variable::Union{String,Symbol,Function},kwargs...) Generate an image of the model where the color of each point is determined by the variable provided. params:     m: model         - model object to extract variable from     variable (optional): Union{String, Symbol, Function}         - variable to extract from model (if String will be converted to Symbol)         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i))         - if not provided, defaults to :I (intensity)     kwargs...: keyword arguments for Plots.plot returns:     p: Plots.plot\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.image-Tuple","page":"API","title":"BLR.image","text":"BLR.image(m::model,variable::Union{String,Symbol,Function},kwargs...) Generate an image of the model where the color of each point is determined by the variable provided. params:     m: model         - model object to extract variable from     variable (optional): Union{String, Symbol, Function}         - variable to extract from model (if String will be converted to Symbol)         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i))         - if not provided, defaults to :I (intensity)     kwargs...: keyword arguments for Plots.plot returns:     p: Plots.plot\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.plot3d!-Tuple","page":"API","title":"BLR.plot3d!","text":"Plot3d(m::model, variable::Union{String,Symbol,Function}=nothing, annotatedCamera::Bool=true,kwargs...) Generate a 3D plot of the model geometry, optionally colored by a variable. params:     m: model         - model object to plot     variable (optional): Union{String, Symbol, Function}         - variable to color the points by (if String will be converted to Symbol)         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i))         - if not provided, defaults to nothing (no coloring)     annotatedCamera (optional): Bool – default true         - if true, will annotate the camera position and orientation in the plot     kwargs...: keyword arguments for Plots.plot returns:     p: Plots.plot         - 3D plot of the model geometry, optionally colored by the variable provided\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.plot3d!-Tuple{RecipesBase.AbstractPlot, Vararg{Any}}","page":"API","title":"BLR.plot3d!","text":"Plot3d(m::model, variable::Union{String,Symbol,Function}=nothing, annotatedCamera::Bool=true,kwargs...) Generate a 3D plot of the model geometry, optionally colored by a variable. params:     m: model         - model object to plot     variable (optional): Union{String, Symbol, Function}         - variable to color the points by (if String will be converted to Symbol)         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i))         - if not provided, defaults to nothing (no coloring)     annotatedCamera (optional): Bool – default true         - if true, will annotate the camera position and orientation in the plot     kwargs...: keyword arguments for Plots.plot returns:     p: Plots.plot         - 3D plot of the model geometry, optionally colored by the variable provided\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.plot3d-Tuple","page":"API","title":"BLR.plot3d","text":"Plot3d(m::model, variable::Union{String,Symbol,Function}=nothing, annotatedCamera::Bool=true,kwargs...) Generate a 3D plot of the model geometry, optionally colored by a variable. params:     m: model         - model object to plot     variable (optional): Union{String, Symbol, Function}         - variable to color the points by (if String will be converted to Symbol)         - must be a valid attribute of model.rings (e.g. :I, :v, :r, :e, :i, :ϕ) or a function that can be applied to model.rings             - example: Keplerian disk time delays could be calculated like t(ring) = ring.r*(1 .+ sin.(ring.ϕ).*ring.i))         - if not provided, defaults to nothing (no coloring)     annotatedCamera (optional): Bool – default true         - if true, will annotate the camera position and orientation in the plot     kwargs...: keyword arguments for Plots.plot returns:     p: Plots.plot         - 3D plot of the model geometry, optionally colored by the variable provided\n\n\n\n\n\n","category":"method"},{"location":"api/#BLR.t-Tuple{BLR.ring}","page":"API","title":"BLR.t","text":"time delays for a point in a disk  params:     ring: ring         - ring object to calculate time delays for returns:     t: Array{Float64,}         - time delays for each ring in the model\n\n\n\n\n\n","category":"method"},{"location":"usage_examples/#Usage-and-Examples","page":"Usage and Examples","title":"Usage and Examples","text":"","category":"section"},{"location":"usage_examples/","page":"Usage and Examples","title":"Usage and Examples","text":"lorem ipsum dolor...","category":"page"},{"location":"installation/#Installation-guide","page":"Installation","title":"Installation guide","text":"","category":"section"},{"location":"installation/#Julia","page":"Installation","title":"Julia","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Make sure you have a working version of Julia accessible on your system. \nAdd the package from the package manager \nUse the package either with import BLR or using BLR in Julia.","category":"page"},{"location":"installation/#Python","page":"Installation","title":"Python","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"lorem\nipsum\ndolor","category":"page"},{"location":"#BLR.jl","page":"Home","title":"BLR.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"***A fast and flexible toolkit for modeling the broad-line region (BLR) in Julia***","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Define a cloud model with syntax like: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"mClouds = BLR.cloudModel(100_000,μ=500.,β=1.,F=0.5,θₒ=30/180*π,γ=1.,ξ=1.,i=0.,I=BLR.IsotropicIntensity,v=BLR.vCircularCloud,rescale=1e-5,τ=0.0)","category":"page"},{"location":"#Referencing","page":"Home","title":"Referencing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you find this code useful in your work, please cite it as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"lorem ipsum","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you would like to contribute to the package, please open a pull request on the GitHub. For bug reports and feature requests, please open an issue on the GitHub. ","category":"page"}]
}
